#!/usr/bin/python

# Copyright 2017 Edmundo Carmona Antoranz
# Released under the terms of GPLv3

import sys
import argparse

def read_stream(show_filename, filename, stream):
    """
        show_filename will indicate if the filename has to be prepended to the line that will be printed
        filename: name of the file being read
        stream: stream that will be 
    """
    line = ""
    while True:
        prevLine = line
        line = stream.readline()

        if len(line) == 0:
            # reached EOL
            break

        line = line.rstrip('\n')

        # we delete as many chars as prevLine
        for i in range(0, len(prevLine) - len(line)):
            sys.stdout.write('\b \b')
        # now we go back to the beginning of the line
        sys.stdout.write('\r')

        if (show_filename):
            sys.stdout.write(filename)
            sys.stdout.write(":")
        sys.stdout.write(line)

# let's analyze parameters

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--filename", help="Show filenames", action="store_true")
parser.add_argument("file", nargs="*", help="List of files that will be read. Use - for stdin. If none is provided, stdin will be read")
args = parser.parse_args()

if len(args.file) == 0:
    # reading from stdin straight
    read_stream(args.filename, '-', sys.stdin)
else:
    # parameters were passed
    for filename in args.file:
        if (filename == '-'):
            # reading from stdin
            read_stream(args.filename, '-', sys.stdin)
        else:
            # we need to make sure file exists
            try:
                infile = open(filename, 'r')
                read_stream(args.filename, filename, infile)
                infile.close()
            except IOError as ioErr:
                print(ioErr)
sys.stdout.write('\n')
